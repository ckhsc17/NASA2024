#!/bin/bash

# Function to display usage information
usage() {
  echo "Usage: ./compare.sh [OPTION] <PATH A> <PATH B>"
  echo "Options:"
  echo "  -a           Compare hidden files (include files starting with a dot)"
  echo "  -h           Output information about compare.sh"
  echo "  -l           Treat symlinks as files instead of ignoring them"
  echo "  -n <EXP>     Compare only files whose paths follow the REGEX <EXP>"
  echo "  -r           Compare directories recursively"
  exit 1
}

calculate_changes() {
    local line_a=$1
    local mes=$2
    local pattern=$3
    local a=0
    local b=0

    local matches=$(echo "$mes" | grep "$pattern")

    for match in $matches; do
        # calculate (a,b,c)
        if [[ $match == *c* ]]; then
            change_info1=$(echo $match | awk -F[c] '{print $1}') #a
            change_info2=$(echo $match | awk -F[c] '{print $2}') #b

            # calculate a (delete line)
            a=$((a + $(calculate_change $change_info1)))

            # calculate b (insert line)
            b=$((b + $(calculate_change $change_info2)))

        elif [[ $match == *d* ]]; then
            del_info=$(echo $match | awk -F[d] '{print $1}') #a

            # calculate a (delete line)
            a=$((a + $(calculate_change $del_info)))

        elif [[ $match == *a* ]]; then
            add_info=$(echo $match | awk -F[a] '{print $1}') #b

            # calculate b (insert line)
            b=$((b + $(calculate_change $add_info)))
        fi

        local c=$((line_a - a))
        local x=0

        # calculate x
        if [[ $a -gt $b ]]; then
            x=$(((100 * a) / (a + c)))
        else
            x=$(((100 * b) / (b + c)))
        fi

        echo "(a,b,c): $a $b $c"
        echo "changed $x%"
    done
}

calculate_change() {
    local info=$1

    # calculate change (a or b)
    if [[ ${#info} -gt 1 ]]; then
        local tmp1=$(echo $info | awk -F[,] '{print $1}')
        local tmp2=$(echo $info | awk -F[,] '{print $2}')
        echo $((tmp2 - tmp1))
    else
        echo 1
    fi
}

# Initialize variables with default values
compare_hidden=false
output_info=false
treat_symlinks=false
regex_exp=""
recursive=false

# Parse command-line options
while getopts ":ahln:r" opt; do
  case $opt in
    a)
      compare_hidden=true
      ;;
    h)
      output_info=true
      ;;
    l)
      treat_symlinks=true
      ;;
    n)
      regex_exp="$OPTARG"
      recursive=true
      ;;
    r)
      recursive=true
      ;;
    \?) #not listed options
      echo "Invalid option: -$OPTARG"
      usage
      ;;
  esac
done

# Shift the processed options
shift $((OPTIND - 1))

# Check if there are enough arguments and that the files exist
if [ $# -ne 2 ] || [ ]; then
  echo "Usage: ./compare.sh <FILE A> <FILE B>"
  usage
  exit 1
fi

file_a="$1"
file_b="$2"
line_a=$(wc -l < "$file_a")
line_b=$(wc -l < "$file_b")

echo "count_a: $line_a"
echo "count_b: $line_b"

a=0; b=0; c=0 #刪除、插入、保留

pattern='[0-9][[:alpha:]][0-9]' #for grep expression

# Check if both files exist
if [ -e "$file_a" ] || [ -e "$file_b" ]; then
  #echo "Error: One or both files do not exist."
  #exit 1
  echo "hihihi"

  mes=`diff $file_a $file_b`
  calculate_changes "$line_a" "$mes" "$pattern" #self-defined function

fi

:<<'END_COMMENT'
#2 Check if both paths are directories when -r option is used 
if [ "$recursive" = true ] && [[ -d "$1" || -d "$2" ]]; then
  #echo "Error: Both paths must be directories when using -r option."
  usage
  
fi

# Check for invalid combinations of options
if [ "$recursive" = false ] && ([ "$compare_hidden" = true ] || [ -n "$regex_exp" ]); then
  echo "Error: -a and -n options require -r option."
  usage #call usage function
fi
END_COMMENT

# Display information about compare.sh if -h is specified
if [ "$output_info" = true ]; then
  usage
fi

# Perform the comparison based on the configured options
# Add your comparison logic here...


# Example: Use diff command for recursive directory comparison
if [ "$recursive" = true && ]; then
  #檢查是否存在
  #
  #排除隱藏檔案（預設會找到）
  #
  mes=`diff -r "$1" "$2"`
  matches=$(echo "$mes" | grep $pattern)
  echo "matches: $matches"

else
  diff "$1" "$2"
fi

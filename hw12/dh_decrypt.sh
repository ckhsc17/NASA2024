#!/bin/bash

# Public Parameters provided by nasa2023
p=22576738017835080262877843701749634850617615125854087739043526179744140537692546235303394342825099789672187131484809219828578209085434504812205466211809509312646010163420466911624570134938619901325974015691495758199847891029752021861010053488894613765091779498389361717199652203581458235912782404212189980887677364793502291589837490993625733938828495099140606994041074198876998848736729115104379412189526251092416512126001365278039535701527400528124922912992104175307434201957085685227920121496352427569705275331717292691027336085165189528066507004179996186174476800146427478310174828794820885700903184044808658319809
g=7
u=1862248815160624864452746969307427756225736780561474348058445657192067156396837216166615191483934429590331210498304704151661243642900982149693431525054117973531171043686575982434841581600248650534772500520400667287755133724236630470868780558151660992260862969697955980674372156258233060851599070539964315791063141560394767971234148968286666403261703506067767382611205657692152526465932776055696252284079800318950719385224773430780102270640050163268528393407029512341826673150737624755250210905334054353290348103442567048555920841692912719509376392947403612231439945434893304794953892627563753564041545355129442008938
v=7

# IV and Encrypted password provided by nasa2023
IV="70e69025f65aa5835cf1133b91031175"
encrypted_password="b60477d5ee5ff6c552bbb604c0d6e6fc087abe22b03a8c21427cdf3ecaa8db7f"

# Step 3: Generate private key 'a'
#a="$v"
#a_dec=$(echo "ibase=16; $a" | bc)

#echo "a: $a"

# Step 4: Compute shared secret 'S'
#S=$(echo "$u^$a_dec % $p" | bc)
S=$u

echo "shared secret: $S"

# Convert shared secret to hexadecimal
S_hex=$(echo "obase=16; $S" | bc)



# Extract the first 16 bytes (32 hex characters) for AES key
aes_key=$(echo $S_hex | cut -c 1-32)

echo "aes key: $aes_key"

# If aes_key is less than 32 characters, pad it with zeros
while [ ${#aes_key} -lt 32 ]; do
  aes_key="${aes_key}0"
done

echo "shared key computed"

# Convert AES key to binary format for openssl
echo $aes_key | xxd -r -p > aes_key.bin

# Convert IV to binary format for openssl
echo $IV | xxd -r -p > iv.bin

# Convert encrypted password to binary format for openssl
echo $encrypted_password | xxd -r -p > encrypted_password.bin

echo "turned into binary"

# Decrypt the password using AES-128-CBC
openssl enc -aes-128-cbc -d -in encrypted_password.bin -K $(cat aes_key.bin) -iv $(cat iv.bin) -out decrypted_password.txt

# Output the decrypted password
echo "Decrypted Password:"
cat decrypted_password.txt

#!/bin/bash

# Public Parameters provided by nasa2023
p=22576738017835080262877843701749634850617615125854087739043526179744140537692546235303394342825099789672187131484809219828578209085434504812205466211809509312646010163420466911624570134938619901325974015691495758199847891029752021861010053488894613765091779498389361717199652203581458235912782404212189980887677364793502291589837490993625733938828495099140606994041074198876998848736729115104379412189526251092416512126001365278039535701527400528124922912992104175307434201957085685227920121496352427569705275331717292691027336085165189528066507004179996186174476800146427478310174828794820885700903184044808658319809
g=7
u=4181792317111028336293376824888562943549075974374774627161699861121794933084330967970263887775093328445738475335928578751058095929409476955291414473853958939006264983088017257839621579431807213021897821847729548522401143793477877426654526555275121983987276946577001380404709650470158553507262052430617246664087760158009295684401253605605237518701949270742535724927715474069527442812551765497557539494378043165819651676830211615449032484274646438194648688226491189805935443912239532248916735224602821349868043795270710761631063835521367621719251030992063557909140794683904295579847695324646419753808242880884978841688
#v=5

# IV and Encrypted password provided by nasa2023
IV="a83c4d95b5ac6647a078f35d1f2554a4"
encrypted_password="9c0d19a5ec93fb5b4a61aecc6a2b9a72c0eb9d804531c6ee14cd48492afcf107"

# Step 3: Generate private key 'a'
#a=$(openssl rand -hex 32)
a=5378
a_dec=$(echo "ibase=16; $a" | bc)

echo "a_dec: $a_dec"
#echo "a: $a |xxd -r -p"

# Step 4: Compute shared secret 'S'
S=$(echo "$u^$a_dec % $p" | bc)

echo "shared secret: $S"

# Convert shared secret to hexadecimal
S_hex=$(echo "obase=16; $S" | bc)

echo "S_hex: $S_hex"

# Extract the first 16 bytes (32 hex characters) for AES key
aes_key=$(echo $S_hex | cut -c 1-32)

echo "aes key: $aes_key"

# If aes_key is less than 32 characters, pad it with zeros
while [ ${#aes_key} -lt 32 ]; do
  aes_key="${aes_key}0"
done

echo "shared key computed"

# Convert AES key to binary format for openssl
echo $aes_key > aes_key.hex

# Convert IV to binary format for openssl
echo $IV  > iv.hex

# Convert encrypted password to binary format for openssl
echo $encrypted_password > encrypted_password.hex

echo "hi"

# Decrypt the password using AES-128-CBC
#openssl enc -aes-128-cbc -d -in encrypted_password.hex -K $(cat aes_key.bin) -iv $(cat iv.bin) -out decrypted_password.txt
#echo $encrypted_password | xxd -r -p | openssl enc -aes-128-cbc -d -K $aes_key -iv $IV -out decrypted_password.txt
#openssl aes-256-cbc -d -pbkdf2 -in $

# Output the decrypted password
echo "Decrypted Password:"
cat decrypted_password.txt
